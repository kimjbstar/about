{"pageProps":{"blog":{"id":"3650c2f9-1617-461c-83cc-dcc7b7001513","title":"Vuejs 기반 static page AWS CloudFront + S3로 배포","content":"## aws s3\n\nvuejs 같은 경우는 static page로써 lambda에 배포하기에는 부적절합니다.\n\n리서치해본 결과 aws s3에 많이 배포한다고 합니다. Vuejs 공식 문서에도 언급되어 있습니다.\n\n[Deployment | Vue CLI](https://cli.vuejs.org/guide/deployment.html#amazon-s3)\n\n또한 AWS 공식 문서에도 s3 버킷을 이용하여 static website를 관리하는 방법이 잘 나와있습니다.\n\n[Amazon S3 버킷에서 호스팅하는 웹 사이트로 트래픽 라우팅](https://docs.aws.amazon.com/ko_kr/Route53/latest/DeveloperGuide/RoutingToS3Bucket.html)\n\n체크할 점으로는 버킷명이 도메인명과 동일해야 한다는 점입니다.\n\n그 후 업로드 자체는 정말 쉽습니다. 빌드 후 aws s3 sync만 하면 되기 때문입니다.\n\n```yaml\n# github action yml 일부 ...\n  - name: Configure AWS credentials\n    uses: aws-actions/configure-aws-credentials@v1\n    with:\n      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      aws-region: ap-northeast-2\n\n  - name: sync to s3\n    run: aws s3 sync ./dist s3://버킷명 --delete\n...\n```\n\n## cloudfront\n\n업로드가 성공했으니 이제 route53 도메인 연결, TLS 인증서 적용만 해주면 됩니다.\n\n리서치해보면 인증서 적용을 위해서는 s3와 route53 사이에 cloudfront를 두어야 한다고 합니다.\n\n[CloudFront를 사용하여 Amazon S3에서 호스팅되는 정적 웹 사이트 제공](https://aws.amazon.com/ko/premiumsupport/knowledge-center/cloudfront-serve-static-website/)\n\n문서를 따라해보면 여기까지도 어렵지 않습니다. 다만 실제 배포를 해보면 코드가 바로 반영되지 않는데, 그 이유는 cloudfront 단에서 기본적으로 캐싱을 하기 때문입니다.\n\n해결 방법으로는\n\n1. 옵션에서 TTL을 일괄 0으로 설정\n2. 배포 직후 invalidation이라는 일종의 캐시 무효화 작업을 생성\n3. s3 객체(파일)에 메타데이터를 추가하여 캐싱이 되지 않도록 하는 방법\n\n이 있는데 저 invalidation 작업이 생각보다 시간이 오래 소요되어 피하고 싶고, 일부 파일은 캐싱을 시키고 싶었기 때문에 3번 방법을 택했습니다.\n\n즉 s3에 파일 업로드 시 캐싱을 원하지 않는 파일에만 metadata를 추가해 배포하면 이슈가 해결됩니다.\n\n```bash\naws s3 sync ./dist s3://dev.just1s.xyz --exclude \"*.js*\" --delete\naws s3 sync ./dist s3://dev.just1s.xyz --exclude \"*\" --include \"*.js*\" --metadata-directive COPY --cache-control max-age=0,no-cache,no-store,must-revalidate --delete\n```\n\n위와 같이 하면 static asset 등 js가 아닌 파일은 그대로 배포, js 파일 들은 cache-control metadata 가 추가된 채로 배포가 됩니다.\n\n## 결론\n\n최종 development branch 배포 github action yaml은 다음과 같습니다.\n\n```yaml\nname: Deploy to Development\non:\n  push:\n    branches:\n      - development\n\njobs:\n  build_vue:\n    name: Build Vue\n    runs-on: ubuntu-latest\n    env:\n      NODE_ENV: \"development\"\n    steps:\n      - name: checkout\n        uses: actions/checkout@master\n      - name: setup node\n        uses: actions/setup-node@v1\n        with:\n          node-version: \"12\"\n\n      - name: Cache node modules\n        uses: actions/cache@v2\n        with:\n          path: |\n            **/node_modules\n          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}\n\n      - name: npm install\n        run: npm install\n\n      - name: Build\n        run: npm run build:development\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: ap-northeast-2\n\n      - name: sync to s3 exclude js\n        run: aws s3 sync ./dist s3://dev.just1s.xyz --exclude \"*.js*\" --delete\n\n      - name: sync to s3 js with disabled cache\n        run: aws s3 sync ./dist s3://dev.just1s.xyz --exclude \"*\" --include \"*.js*\" --metadata-directive COPY --cache-control max-age=0,no-cache,no-store,must-revalidate --delete\n```","created_at":"2020-07-17T03:16:00+00:00","subtitle":null,"is_show":true}},"__N_SSG":true}